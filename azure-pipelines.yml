# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - "*"

pr:
- master

# -- GLOBAL VARIABLES ------------------------------------------------------------------
variables:
  packageFolderName: "isogeo_migrations_toolbelt"
  pyPiPackageName: "isogeo-migrations-toolbelt"
  vmImageName: "windows-2019"


# -- STAGES ----------------------------------------------------------------------------
stages:
- stage: Lint
  displayName: Format and lint code

  jobs:
    - job: 'Lint'
      pool:
        vmImage: $(vmImageName)

      steps:
      - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
        fetchDepth: 1
        
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
          addToPath: true

      - script: |
          python -m pip install -U pip --cache-dir ./.pipcache
          python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
        displayName: 'Install black and flake8 (included in dev requirements)'

      - script: |
          python -m black --target-version=py37 ./$(packageFolderName)
          python -m black --target-version=py37 ./scripts
          python -m black --target-version=py37 ./tests
        displayName: 'Apply black code formatting'

      - script: |
          python -m flake8  ./$(packageFolderName)/ --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m flake8  ./$(packageFolderName)/ --count --exit-zero --max-complexity=15 --max-line-length=100 --ignore E501,W505
        displayName: "Static code analisis (PEP8 conformance, imports...) with flake8"

      # save formatted code to use later avoiding git clone again
      - publish: $(System.DefaultWorkingDirectory)
        artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
        displayName: 'Publish formatted code with dependencies'

- stage: Test
  displayName: Tests stage
  dependsOn: Lint
  condition: succeeded()

  jobs:
  # TESTS
  - job: 'Test'
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: QA

    steps:

    # no need for source code
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: "Download artifact previously saved"
      inputs:
        buildType: "current"
        artifact: "FORMATTED_$(pyPiPackageName)_$(Build.SourceBranchName)_$(Build.BuildId)"
        targetPath: "$(System.DefaultWorkingDirectory)"
      
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        architecture: 'x64'
        addToPath: true

    - script: |
        python -m pip install -U pip --cache-dir ./.pipcache
        python -m pip install -U -r ./requirements.txt --cache-dir ./.pipcache
      displayName: 'Install dependencies'

    - script: |
        python -m pytest -c ./setup.cfg
      env:
        # platform
        ISOGEO_PLATFORM: $(ISOGEO_PLATFORM)
        OAUTHLIB_INSECURE_TRANSPORT: $(OAUTHLIB_INSECURE_TRANSPORT)
        # URLs
        ISOGEO_API_URL: $(ISOGEO_API_URL)
        ISOGEO_ID_URL: $(ISOGEO_ID_URL)
        # oAuth2 Client Credentials Grant
        ISOGEO_API_GROUP_CLIENT_ID: $(ISOGEO_API_GROUP_CLIENT_ID)
        ISOGEO_API_GROUP_CLIENT_SECRET: $(ISOGEO_API_GROUP_CLIENT_SECRET)
        # oAuth2 Legacy Application Client
        ISOGEO_API_USER_LEGACY_CLIENT_ID: $(ISOGEO_API_USER_LEGACY_CLIENT_ID)
        ISOGEO_API_USER_LEGACY_CLIENT_SECRET: $(ISOGEO_API_USER_LEGACY_CLIENT_SECRET)
        ISOGEO_USER_NAME: $(ISOGEO_USER_NAME)
        ISOGEO_USER_PASSWORD: $(ISOGEO_USER_PASSWORD)
        # static fixtures
        ISOGEO_METADATA_FIXTURE_UUID: $(ISOGEO_FIXTURES_METADATA_COMPLETE)
        ISOGEO_WORKGROUP_TEST_UUID: $(ISOGEO_WORKGROUP_TEST_UUID)
      displayName: 'Tests and coverage - Pytest'

    - task: PublishTestResults@2
      displayName: "Publish unit test results"
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

    - task: PublishCodeCoverageResults@1
      displayName: "Publish coverage results to Azure Pipelines"
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'


